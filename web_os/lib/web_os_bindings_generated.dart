// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/web_os.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class WebOsBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WebOsBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WebOsBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void debug_mode() {
    return _debug_mode();
  }

  late final _debug_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('debug_mode');
  late final _debug_mode = _debug_modePtr.asFunction<void Function()>();

  void connect_to_tv(
    WebOsNetworkInfoFFI network_info,
    int isolate_port,
  ) {
    return _connect_to_tv(
      network_info,
      isolate_port,
    );
  }

  late final _connect_to_tvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WebOsNetworkInfoFFI, ffi.Int64)>>('connect_to_tv');
  late final _connect_to_tv =
      _connect_to_tvPtr.asFunction<void Function(WebOsNetworkInfoFFI, int)>();

  void load_last_tv_info(
    int isolate_port,
  ) {
    return _load_last_tv_info(
      isolate_port,
    );
  }

  late final _load_last_tv_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'load_last_tv_info');
  late final _load_last_tv_info =
      _load_last_tv_infoPtr.asFunction<void Function(int)>();

  void turn_on(
    WebOsNetworkInfoFFI info,
    int isolate_port,
  ) {
    return _turn_on(
      info,
      isolate_port,
    );
  }

  late final _turn_onPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(WebOsNetworkInfoFFI, ffi.Int64)>>('turn_on');
  late final _turn_on =
      _turn_onPtr.asFunction<void Function(WebOsNetworkInfoFFI, int)>();

  void discovery_tv(
    int isolate_port,
  ) {
    return _discovery_tv(
      isolate_port,
    );
  }

  late final _discovery_tvPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('discovery_tv');
  late final _discovery_tv = _discovery_tvPtr.asFunction<void Function(int)>();

  void turn_off() {
    return _turn_off();
  }

  late final _turn_offPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('turn_off');
  late final _turn_off = _turn_offPtr.asFunction<void Function()>();

  void increment_volume() {
    return _increment_volume();
  }

  late final _increment_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('increment_volume');
  late final _increment_volume =
      _increment_volumePtr.asFunction<void Function()>();

  void decrease_volume() {
    return _decrease_volume();
  }

  late final _decrease_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('decrease_volume');
  late final _decrease_volume =
      _decrease_volumePtr.asFunction<void Function()>();

  void set_mute(
    int mute,
  ) {
    return _set_mute(
      mute,
    );
  }

  late final _set_mutePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('set_mute');
  late final _set_mute = _set_mutePtr.asFunction<void Function(int)>();

  void increment_channel() {
    return _increment_channel();
  }

  late final _increment_channelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('increment_channel');
  late final _increment_channel =
      _increment_channelPtr.asFunction<void Function()>();

  void decrease_channel() {
    return _decrease_channel();
  }

  late final _decrease_channelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('decrease_channel');
  late final _decrease_channel =
      _decrease_channelPtr.asFunction<void Function()>();

  void pressed_button(
    int key,
  ) {
    return _pressed_button(
      key,
    );
  }

  late final _pressed_buttonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'pressed_button');
  late final _pressed_button =
      _pressed_buttonPtr.asFunction<void Function(int)>();

  void pressed_media_player_button(
    int key,
  ) {
    return _pressed_media_player_button(
      key,
    );
  }

  late final _pressed_media_player_buttonPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'pressed_media_player_button');
  late final _pressed_media_player_button =
      _pressed_media_player_buttonPtr.asFunction<void Function(int)>();

  void launch_app(
    int app,
  ) {
    return _launch_app(
      app,
    );
  }

  late final _launch_appPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('launch_app');
  late final _launch_app = _launch_appPtr.asFunction<void Function(int)>();

  void pointer_move_it(
    double dx,
    double dy,
    int drag,
  ) {
    return _pointer_move_it(
      dx,
      dy,
      drag,
    );
  }

  late final _pointer_move_itPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float, ffi.Int)>>(
      'pointer_move_it');
  late final _pointer_move_it =
      _pointer_move_itPtr.asFunction<void Function(double, double, int)>();

  void pointer_scroll(
    double dx,
    double dy,
  ) {
    return _pointer_scroll(
      dx,
      dy,
    );
  }

  late final _pointer_scrollPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float)>>(
          'pointer_scroll');
  late final _pointer_scroll =
      _pointer_scrollPtr.asFunction<void Function(double, double)>();

  void pointer_click() {
    return _pointer_click();
  }

  late final _pointer_clickPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pointer_click');
  late final _pointer_click = _pointer_clickPtr.asFunction<void Function()>();
}

abstract class LaunchAppFFI {
  static const int YouTube = 0;
  static const int Netflix = 1;
  static const int AmazonPrimeVideo = 2;
}

abstract class MediaPlayerButtonFFI {
  static const int PLAY = 0;
  static const int PAUSE = 1;
}

abstract class MotionButtonKeyFFI {
  static const int HOME = 0;
  static const int BACK = 1;
  static const int UP = 2;
  static const int DOWN = 3;
  static const int LEFT = 4;
  static const int RIGHT = 5;
  static const int ENTER = 6;
  static const int GUIDE = 7;
  static const int QMENU = 8;
}

final class WebOsNetworkInfoFFI extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> ip;

  external ffi.Pointer<ffi.Char> mac;
}
